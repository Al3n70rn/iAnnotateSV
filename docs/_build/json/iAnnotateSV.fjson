{"body": "<div class=\"section\" id=\"iannotatesv-package\">\n<h1>iAnnotateSV package<a class=\"headerlink\" href=\"#iannotatesv-package\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"module-iannotatesv-contents\">\n<h2>Module <tt class=\"docutils literal\"><span class=\"pre\">iAnnotateSV</span></tt> contents<a class=\"headerlink\" href=\"#module-iannotatesv-contents\" title=\"Permalink to this headline\">\u00b6</a></h2>\n</div>\n<div class=\"section\" id=\"submodules\">\n<h2>Submodules<a class=\"headerlink\" href=\"#submodules\" title=\"Permalink to this headline\">\u00b6</a></h2>\n</div>\n<div class=\"section\" id=\"annotateeachbreakpoint-module\">\n<h2><tt class=\"docutils literal\"><span class=\"pre\">AnnotateEachBreakpoint</span></tt> module<a class=\"headerlink\" href=\"#annotateeachbreakpoint-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><dl class=\"first docutils\">\n<dt>This module will annotate each breakpoint taking in:</dt>\n<dd><ul class=\"first simple\">\n<li><strong>chr</strong> : chromosome for the event,</li>\n<li><strong>pos</strong> : position in the chromosome for the event,</li>\n<li><strong>str</strong> : direction of the reads for the event[either 0 or 1],</li>\n<li><strong>referenceDataframe</strong> : a pandas data-frame that will store reference information</li>\n</ul>\n<table class=\"last docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Example:</th><td class=\"field-body\"><tt class=\"docutils literal\"><span class=\"pre\">AnnotateEachBreakpoint(chr1,pos1,str1,refDF)</span></tt></td>\n</tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"findatranscript-module\">\n<h2><tt class=\"docutils literal\"><span class=\"pre\">FindATranscript</span></tt> module<a class=\"headerlink\" href=\"#findatranscript-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><dl class=\"first docutils\">\n<dt>This module will automatically find the highest preference transcript based on input:</dt>\n<dd><ul class=\"first\">\n<li><dl class=\"first docutils\">\n<dt><strong>queryDF</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Its a dataframe with</span></dt>\n<dd><ul class=\"first last simple\">\n<li><strong>c</strong> = zone: 1=exon, 2=intron, 3=3&#8217;-UTR, 4=5&#8217;-UTR, 5=promoter</li>\n<li><strong>d,e</strong> = for exons: which one, and how far</li>\n<li><strong>d1,d2,e1,e2</strong> = for introns: between which exons and how far?</li>\n<li><strong>f</strong> = for introns: how many bases in the partially completed codon?,</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p class=\"first\"><strong>referenceDataframe</strong> : a pandas data-frame that will store reference information</p>\n</li>\n</ul>\n<table class=\"last docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Example:</th><td class=\"field-body\"><tt class=\"docutils literal\"><span class=\"pre\">FindATranscript(queryDF,refDF)</span></tt></td>\n</tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"findalltranscripts-module\">\n<h2><tt class=\"docutils literal\"><span class=\"pre\">FindAllTranscripts</span></tt> module<a class=\"headerlink\" href=\"#findalltranscripts-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><dl class=\"first docutils\">\n<dt>This module will find all transcripts based on input:</dt>\n<dd><ul class=\"first\">\n<li><dl class=\"first docutils\">\n<dt><strong>queryDF</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Its a dataframe with</span></dt>\n<dd><ul class=\"first last simple\">\n<li><strong>c</strong> = zone: 1=exon, 2=intron, 3=3&#8217;-UTR, 4=5&#8217;-UTR, 5=promoter</li>\n<li><strong>d,e</strong> = for exons: which one, and how far</li>\n<li><strong>d1,d2,e1,e2</strong> = for introns: between which exons and how far?</li>\n<li><strong>f</strong> = for introns: how many bases in the partially completed codon?,</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p class=\"first\"><strong>referenceDataframe</strong> : a pandas data-frame that will store reference information</p>\n</li>\n</ul>\n<table class=\"last docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Example:</th><td class=\"field-body\"><tt class=\"docutils literal\"><span class=\"pre\">FindAllTranscripts(queryDF,refDF)</span></tt></td>\n</tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"findcanonicaltranscript-module\">\n<h2><tt class=\"docutils literal\"><span class=\"pre\">FindCanonicalTranscript</span></tt> module<a class=\"headerlink\" href=\"#findcanonicaltranscript-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><dl class=\"first docutils\">\n<dt>This module will Finad a canonical transcript based on the input for main function and output of FindAllTranscripts:</dt>\n<dd><ul class=\"first simple\">\n<li><strong>geneList</strong> : List of genes [this will normally be list with same names] for the Structural Variant in question,</li>\n<li><strong>transcriptList</strong> : List of transcripts for the Structural Variant in question,</li>\n<li><strong>siteList</strong> : direction of the site for the event[either 0 or 1],</li>\n<li><strong>zoneList</strong> : different zones in which the event can occur [zone: 1=exon, 2=intron, 3=3&#8217;-UTR, 4=5&#8217;-UTR, 5=promoter]</li>\n<li><strong>strandList</strong> : direction of the read for the event[either 0 or 1],</li>\n<li><strong>intronnumList</strong> : Which intron the event occurs if the event is in intron for each transcript,</li>\n<li><strong>intronframeList</strong> : What is the frame of the intron where the event is occuring for each transcript.</li>\n<li><strong>ctDict</strong> : a dictionary containing the canonical transcript information for each gene. [Gene=&gt;Transcript]</li>\n</ul>\n<table class=\"last docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Example:</th><td class=\"field-body\"><tt class=\"docutils literal\"><span class=\"pre\">FindCT(geneList,transcriptList,siteList,zoneList,strandList,intronnumList,intronframeList,ctDict)</span></tt></td>\n</tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"predictfunction-module\">\n<h2><tt class=\"docutils literal\"><span class=\"pre\">PredictFunction</span></tt> module<a class=\"headerlink\" href=\"#predictfunction-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">This module will predict the function of each annotated breakpoint</p>\n</li>\n<li><dl class=\"first docutils\">\n<dt>It takes two pandas series which has following information:</dt>\n<dd><ul class=\"first simple\">\n<li><strong>gene</strong> : Gene for the event,</li>\n<li><strong>transcript</strong> : Transcript used for the event,</li>\n<li><strong>site</strong> : Explanation for site where the event occurs,</li>\n<li><strong>zone</strong> : Where does the event occur [ 1=exon, 2=intron, 3=3&#8217;-UTR, 4=5&#8217;-UTR, 5=promoter ],</li>\n<li><strong>strand</strong> : Direction of the transcript,</li>\n<li><strong>str</strong> : Direction of the read,</li>\n<li><strong>intronnum</strong> : Which intron the event occurs if the event is in intron,</li>\n<li><strong>intronframe</strong> : What is the frame of the intron where the event is occuring.</li>\n</ul>\n<table class=\"last docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Example:</th><td class=\"field-body\"><p class=\"first\"><tt class=\"docutils literal\"><span class=\"pre\">ann1S</span> <span class=\"pre\">=</span> <span class=\"pre\">pandas.Series([gene1,transcript1,site1,zone1,strand1,str1,intronnum1,intronframe1],index=['gene1',</span> <span class=\"pre\">'transcript1',</span> <span class=\"pre\">'site1',</span> <span class=\"pre\">'zone1',</span> <span class=\"pre\">'txstrand1',</span> <span class=\"pre\">'readstrand1',</span> <span class=\"pre\">'intronnum1','intronframe1'])</span></tt></p>\n<p><tt class=\"docutils literal\"><span class=\"pre\">ann2S</span> <span class=\"pre\">=</span> <span class=\"pre\">pandas.Series([gene2,transcript2,site2,zone2,strand2,str2,intronnum2,intronframe2],index=['gene2',</span> <span class=\"pre\">'transcript2',</span> <span class=\"pre\">'site2',</span> <span class=\"pre\">'zone2',</span> <span class=\"pre\">'txstrand2',</span> <span class=\"pre\">'readstrand2',</span> <span class=\"pre\">'intronnum2','intronframe2'])</span></tt></p>\n<p>So <strong>ann1S</strong> &amp; <strong>ann2S</strong> are series that will go to PredictFuntionForSV()</p>\n<p class=\"last\"><tt class=\"docutils literal\"><span class=\"pre\">PredictFunctionForSV(ann1S,ann2S)</span></tt></p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"helper-module\">\n<h2><tt class=\"docutils literal\"><span class=\"pre\">helper</span></tt> module<a class=\"headerlink\" href=\"#helper-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><dl class=\"first docutils\">\n<dt>This module has multiple submodules</dt>\n<dd><ol class=\"first last arabic simple\">\n<li><strong>ReadFile()</strong><ul>\n<li>This will read a tab-delimited file into a panadas dataframe</li>\n</ul>\n</li>\n<li><strong>ExtendPromoterRegion()</strong><ul>\n<li>This will extend the promoter region to a given length</li>\n</ul>\n</li>\n<li><strong>bp2str()</strong><ul>\n<li>This will convert base pair information to string information</li>\n</ul>\n</li>\n</ol>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"iannotatesv-module\">\n<h2><tt class=\"docutils literal\"><span class=\"pre\">iAnnotateSV</span></tt> module<a class=\"headerlink\" href=\"#iannotatesv-module\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>This module is the driver module, it takes user information and runs all other module to produce proper structural variant annotation</li>\n</ul>\n<p><strong>usage: iAnnotateSV.py [options]</strong></p>\n<p><strong>Annotate SV based on a specific human reference</strong></p>\n<dl class=\"docutils\">\n<dt><strong>optional arguments:</strong></dt>\n<dd><table class=\"first docutils option-list\" frame=\"void\" rules=\"none\">\n<col class=\"option\" />\n<col class=\"description\" />\n<tbody valign=\"top\">\n<tr><td class=\"option-group\">\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td class=\"option-group\">\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--verbose</span></kbd></td>\n<td>make lots of noise [default]</td></tr>\n<tr><td class=\"option-group\" colspan=\"2\">\n<kbd><span class=\"option\">-r <var>hg19</var></span>, <span class=\"option\">--refFileVersion <var>hg19</var></span></kbd></td>\n</tr>\n<tr><td>&nbsp;</td><td>Which human reference file to be used, hg18,hg19 or\nhg38</td></tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>-o outfile, &#8211;outputFile out.txt</dt>\n<dd>Full path with for the output file</dd>\n<dt>-i inputSVfile, &#8211;svFile svfile.txt</dt>\n<dd>Location of the structural variants file to annotate</dd>\n<dt>-d distance, &#8211;distance 3000</dt>\n<dd>Distance used to extend the promoter region</dd>\n</dl>\n<table class=\"docutils option-list\" frame=\"void\" rules=\"none\">\n<col class=\"option\" />\n<col class=\"description\" />\n<tbody valign=\"top\">\n<tr><td class=\"option-group\" colspan=\"2\">\n<kbd><span class=\"option\">-a</span>, <span class=\"option\">--autoSelect</span></kbd></td>\n</tr>\n<tr><td>&nbsp;</td><td>Auto Select which transcript to be used[default]</td></tr>\n</tbody>\n</table>\n<dl class=\"last docutils\">\n<dt>-c canonicalExonsFile, &#8211;canonicalTranscripts canonicalExons.txt</dt>\n<dd>Location of canonical transcript list for each gene.\nUse only if you want the output for specific\ntranscripts for each gene.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n</div>\n", "display_toc": true, "title": "iAnnotateSV package", "sourcename": "iAnnotateSV.txt", "customsidebar": null, "current_page_name": "iAnnotateSV", "next": null, "rellinks": [["genindex", "General Index", "I", "index"], ["modules", "iAnnotateSV", "P", "previous"]], "meta": {}, "parents": [{"link": "../modules/", "title": "iAnnotateSV"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">iAnnotateSV package</a><ul>\n<li><a class=\"reference internal\" href=\"#module-iannotatesv-contents\">Module <tt class=\"docutils literal\"><span class=\"pre\">iAnnotateSV</span></tt> contents</a></li>\n<li><a class=\"reference internal\" href=\"#submodules\">Submodules</a></li>\n<li><a class=\"reference internal\" href=\"#annotateeachbreakpoint-module\"><tt class=\"docutils literal\"><span class=\"pre\">AnnotateEachBreakpoint</span></tt> module</a></li>\n<li><a class=\"reference internal\" href=\"#findatranscript-module\"><tt class=\"docutils literal\"><span class=\"pre\">FindATranscript</span></tt> module</a></li>\n<li><a class=\"reference internal\" href=\"#findalltranscripts-module\"><tt class=\"docutils literal\"><span class=\"pre\">FindAllTranscripts</span></tt> module</a></li>\n<li><a class=\"reference internal\" href=\"#findcanonicaltranscript-module\"><tt class=\"docutils literal\"><span class=\"pre\">FindCanonicalTranscript</span></tt> module</a></li>\n<li><a class=\"reference internal\" href=\"#predictfunction-module\"><tt class=\"docutils literal\"><span class=\"pre\">PredictFunction</span></tt> module</a></li>\n<li><a class=\"reference internal\" href=\"#helper-module\"><tt class=\"docutils literal\"><span class=\"pre\">helper</span></tt> module</a></li>\n<li><a class=\"reference internal\" href=\"#iannotatesv-module\"><tt class=\"docutils literal\"><span class=\"pre\">iAnnotateSV</span></tt> module</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../modules/", "title": "iAnnotateSV"}, "metatags": ""}