
iAnnotateSV package
*******************


Module "iAnnotateSV" contents
=============================


Submodules
==========


"AnnotateEachBreakpoint" module
===============================

* This module will annotate each breakpoint taking in:

     * **chr** : chromosome for the event,

     * **pos** : position in the chromosome for the event,

     * **str** : direction of the reads for the event[either 0 or
       1],

     * **referenceDataframe** : a pandas data-frame that will store
       reference information

     Example:
        "AnnotateEachBreakpoint(chr1,pos1,str1,refDF)"


"FindATranscript" module
========================

* This module will automatically find the highest preference
  transcript based on input:

     * **queryDF** : Its a dataframe with

          * **c** = zone: 1=exon, 2=intron, 3=3'-UTR, 4=5'-UTR,
            5=promoter

          * **d,e** = for exons: which one, and how far

          * **d1,d2,e1,e2** = for introns: between which exons and
            how far?

          * **f** = for introns: how many bases in the partially
            completed codon?,

     * **referenceDataframe** : a pandas data-frame that will store
       reference information

     Example:
        "FindATranscript(queryDF,refDF)"


"FindAllTranscripts" module
===========================

* This module will find all transcripts based on input:

     * **queryDF** : Its a dataframe with

          * **c** = zone: 1=exon, 2=intron, 3=3'-UTR, 4=5'-UTR,
            5=promoter

          * **d,e** = for exons: which one, and how far

          * **d1,d2,e1,e2** = for introns: between which exons and
            how far?

          * **f** = for introns: how many bases in the partially
            completed codon?,

     * **referenceDataframe** : a pandas data-frame that will store
       reference information

     Example:
        "FindAllTranscripts(queryDF,refDF)"


"FindCanonicalTranscript" module
================================

* This module will Finad a canonical transcript based on the input
  for main function and output of FindAllTranscripts:

     * **geneList** : List of genes [this will normally be list with
       same names] for the Structural Variant in question,

     * **transcriptList** : List of transcripts for the Structural
       Variant in question,

     * **siteList** : direction of the site for the event[either 0
       or 1],

     * **zoneList** : different zones in which the event can occur
       [zone: 1=exon, 2=intron, 3=3'-UTR, 4=5'-UTR, 5=promoter]

     * **strandList** : direction of the read for the event[either 0
       or 1],

     * **intronnumList** : Which intron the event occurs if the
       event is in intron for each transcript,

     * **intronframeList** : What is the frame of the intron where
       the event is occuring for each transcript.

     * **ctDict** : a dictionary containing the canonical transcript
       information for each gene. [Gene=>Transcript]

     Example:
        "FindCT(geneList,transcriptList,siteList,zoneList,strandList,
        intronnumList,intronframeList,ctDict)"


"PredictFunction" module
========================

* This module will predict the function of each annotated breakpoint

* It takes two pandas series which has following information:

     * **gene** : Gene for the event,

     * **transcript** : Transcript used for the event,

     * **site** : Explanation for site where the event occurs,

     * **zone** : Where does the event occur [ 1=exon, 2=intron,
       3=3'-UTR, 4=5'-UTR, 5=promoter ],

     * **strand** : Direction of the transcript,

     * **str** : Direction of the read,

     * **intronnum** : Which intron the event occurs if the event is
       in intron,

     * **intronframe** : What is the frame of the intron where the
       event is occuring.

     Example:
        "ann1S = pandas.Series([gene1,transcript1,site1,zone1,strand1
        ,str1,intronnum1,intronframe1],index=['gene1', 'transcript1',
        'site1', 'zone1', 'txstrand1', 'readstrand1',
        'intronnum1','intronframe1'])"

        "ann2S = pandas.Series([gene2,transcript2,site2,zone2,strand2
        ,str2,intronnum2,intronframe2],index=['gene2', 'transcript2',
        'site2', 'zone2', 'txstrand2', 'readstrand2',
        'intronnum2','intronframe2'])"

        So **ann1S** & **ann2S** are series that will go to
        PredictFuntionForSV()

        "PredictFunctionForSV(ann1S,ann2S)"


"helper" module
===============

* This module has multiple submodules

     1. **ReadFile()**

        * This will read a tab-delimited file into a panadas
          dataframe

     2. **ExtendPromoterRegion()**

        * This will extend the promoter region to a given length

     3. **bp2str()**

        * This will convert base pair information to string
          information


"iAnnotateSV" module
====================

* This module is the driver module, it takes user information and
  runs all other module to produce proper structural variant
  annotation

**usage: iAnnotateSV.py [options]**

**Annotate SV based on a specific human reference**

**optional arguments:**
   -h, --help

   show this help message and exit

   -v, --verbose

   make lots of noise [default]

   -r hg19, --refFileVersion hg19

   Which human reference file to be used, hg18,hg19 or hg38

   -o outfile, --outputFile out.txt
      Full path with for the output file

   -i inputSVfile, --svFile svfile.txt
      Location of the structural variants file to annotate

   -d distance, --distance 3000
      Distance used to extend the promoter region

   -a, --autoSelect

   Auto Select which transcript to be used[default]

   -c canonicalExonsFile, --canonicalTranscripts canonicalExons.txt
      Location of canonical transcript list for each gene. Use only if
      you want the output for specific transcripts for each gene.
